###Задача 1. Философы
import logging
import threading
import random
import time

logging.basicConfig(level='INFO')
logger = logging.getLogger(__name__)

class Philosopher(threading.Thread):
    running = True

    def __init__(self, left_fork: threading.Lock, right_fork: threading.Lock):
        super().__init__()
        self.left_fork = left_fork
        self.right_fork = right_fork

    def run(self):
        while self.running:
            logger.info(f'Philosopher {self.getName()} start thinking.')
            time.sleep(random.randint(1, 10))
            logger.info(f'Philosopher {self.getName()} is hungry.')
            with self.left_fork:
                logger.info(f'Philosopher {self.getName()} acquired left fork')
                with self.right_fork:
                    logger.info(f'Philosopher {self.getName()} acquired right fork')
                    self.dining()

    def dining(self):
        logger.info(f'Philosopher {self.getName()} starts eating.')
        time.sleep(random.randint(1, 10))
        logger.info(f'Philosopher {self.getName()} finishes eating and leaves to think.')

def main():
    forks = [threading.Lock() for _ in range(5)]
    philosophers = [
        Philosopher(forks[i % 5], forks[(i + 1) % 5])
        for i in range(5)
    ]
    Philosopher.running = True
    for p in philosophers:
        p.start()
    time.sleep(20)
    Philosopher.running = False
    logger.info("Now we're finishing.")

if __name__ == "__main__":
    main()

###Задача 2. Звёздные войны
import requests
import threading
import time

def fetch_character_data(url, character_data):
    response = requests.get(url)
    data = response.json()
    character_data.append({
        'name': data['name'],
        'age': data['age'],
        'gender': data['gender']
    })

def sequential_fetch():
    character_data = []
    for i in range(1, 21):
        fetch_character_data(f'https://swapi.dev/api/people/{i}/', character_data)
    return character_data

def parallel_fetch():
    character_data = []
    threads = []
    for i in range(1, 21):
        thread = threading.Thread(target=fetch_character_data, args=(f'https://swapi.dev/api/people/{i}/', character_data))
        threads.append(thread)
        thread.start()
    for thread in threads:
        thread.join()
    return character_data

if __name__ == "__main__":
    start_time = time.time()
    data1 = sequential_fetch()
    end_time = time.time()
    print(f"Sequential Fetch Time: {end_time - start_time} seconds")

    start_time = time.time()
    data2 = parallel_fetch()
    end_time = time.time()
    print(f"Parallel Fetch Time: {end_time - start_time} seconds")

###Задача 3. Печатный станок
import logging
import random
import threading
import time
from queue import PriorityQueue

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Producer(threading.Thread):

    def __init__(self, queue: PriorityQueue):
        super().__init__()
        self.queue = queue
        logger.info('Producer: Running')

    def run(self):
        for priority in range(5):
            task = f'task(priority={priority})'
            self.queue.put((priority, task))
            logger.info(f'Added {task}')
            time.sleep(random.random())
        
        logger.info('Producer: Done')

class Consumer(threading.Thread):

    def __init__(self, queue: PriorityQueue):
        super().__init__()
        self.queue = queue
        logger.info('Consumer: Running')

    def run(self):
        while not self.queue.empty():
            priority, task = self.queue.get()
            logger.info(f'Running {task}')
            time.sleep(random.random())
            self.queue.task_done()
        
        logger.info('Consumer: Done')

def main():
    queue = PriorityQueue()
    producer = Producer(queue)
    consumer = Consumer(queue)

    producer.start()
    producer.join()

    consumer.start()
    consumer.join()

if __name__ == '__main__':
    main()

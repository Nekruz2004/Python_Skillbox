###Задача 1. Освобождение порта
import os
import signal
import subprocess

def start_server(port):
    # Проверяем, занят ли порт
    is_port_in_use = check_port(port)
    
    if is_port_in_use:
        print(f"Port {port} is already in use. Trying to kill the process...")
        
        # Находим процесс, занимающий порт и завершаем его
        process_id = find_process(port)
        kill_process(process_id)
        
        print(f"Process with pid {process_id} has been killed.")
        
        # Пытаемся запустить сервер ещё раз
        subprocess.Popen(['python', 'server.py', str(port)])
        
        print("Server has been started.")
    else:
        subprocess.Popen(['python', 'server.py', str(port)])

def check_port(port):
    # Запускаем lsof для проверки занятости порта
    result = subprocess.run(['lsof', '-i', f':{port}'], capture_output=True)
    return bool(result.stdout)

def find_process(port):
    # Ищем процесс, занимающий порт
    result = subprocess.run(['lsof', '-i', f':{port}', '-t'], capture_output=True)
    return int(result.stdout)

def kill_process(pid):
    # Завершаем процесс по его идентификатору
    os.kill(pid, signal.SIGTERM)
###Задача 2. Удалённое исполнение кода
from flask import Flask, request

app = Flask(__name__)

@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    timeout = int(request.form.get('timeout'))
    
    try:
        result = execute_with_timeout(code, timeout)
        return result
    except TimeoutError:
        return 'Code execution timed out.'
    except Exception as e:
        return str(e)

def execute_with_timeout(code, timeout):
    cmd = f"python -c \"{code}\""

    # Запускаем процесс с заданным кодом и временем ожидания
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    try:
        # Получаем результат выполнения кода и ошибки (если есть)
        out, err = process.communicate(timeout=timeout)
        
        if out:
            return out.decode()
        elif err:
            return err.decode()
        else:
            return 'Code execution completed.'
    except subprocess.TimeoutExpired:
        # Если время ожидания истекло, завершаем процесс и вызываем исключение
        process.kill()
        raise TimeoutError("Code execution timed out.")

if __name__ == '__main__':
    app.run()
###Задача 3. Заглушка исключений
class blockerrors:
    def __init__(self, ignored_errors):
        self.ignored_errors = ignored_errors

    def __enter__(self):
        pass

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type and issubclass(exc_type, self.ignored_errors):
            return True
        else:
            return False
###Задача 4. Перенаправление вывода
import sys

class redirect:
    def __init__(self, stdout=None, stderr=None):
        self.stdout = stdout
        self.stderr = stderr
        self.old_stdout = None
        self.old_stderr = None

    def __enter__(self):
        if self.stdout:
            self.old_stdout = sys.stdout
            sys.stdout = self.stdout

        if self.stderr:
            self.old_stderr = sys.stderr
            sys.stderr = self.stderr

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.stdout and self.old_stdout:
            sys.stdout = self.old_stdout
            
        if self.stderr and self.old_stderr:
            sys.stderr = self.old_stderr
###Задача 5. Самопечать (выполните по желанию)
python
print('hello stdout')
stdout_file = open('stdout.txt', 'w')
stderr_file = open('stderr.txt', 'w')

with redirect(stdout=stdout_file, stderr=stderr_file):
    print('hello stdout.txt')
    raise Exception('hello stderr.txt')

print('hello stdout again')
raise Exception('hello stderr')

